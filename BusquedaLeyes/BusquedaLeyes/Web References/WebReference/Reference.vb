'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace WebReference
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="BusquedaLeyesBinding", [Namespace]:="urn:busquedaLeyesWSDL")>  _
    Partial Public Class BusquedaLeyes
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private consultarLicenciaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private consumirLicenciaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cancelarLicenciaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.BusquedaLeyes.My.MySettings.Default.BusquedaLeyes_WebReference_BusquedaLeyes
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event consultarLicenciaCompleted As consultarLicenciaCompletedEventHandler
        
        '''<remarks/>
        Public Event consumirLicenciaCompleted As consumirLicenciaCompletedEventHandler
        
        '''<remarks/>
        Public Event cancelarLicenciaCompleted As cancelarLicenciaCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://127.0.0.1/BusquedaLeyes/php/servicioSOAP.php/consultarLicencia", RequestNamespace:="urn:busquedaLeyesWSDL", ResponseNamespace:="urn:busquedaLeyesWSDL")>  _
        Public Function consultarLicencia(ByVal key As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("consultarLicencia", New Object() {key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub consultarLicenciaAsync(ByVal key As String)
            Me.consultarLicenciaAsync(key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub consultarLicenciaAsync(ByVal key As String, ByVal userState As Object)
            If (Me.consultarLicenciaOperationCompleted Is Nothing) Then
                Me.consultarLicenciaOperationCompleted = AddressOf Me.OnconsultarLicenciaOperationCompleted
            End If
            Me.InvokeAsync("consultarLicencia", New Object() {key}, Me.consultarLicenciaOperationCompleted, userState)
        End Sub
        
        Private Sub OnconsultarLicenciaOperationCompleted(ByVal arg As Object)
            If (Not (Me.consultarLicenciaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent consultarLicenciaCompleted(Me, New consultarLicenciaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://127.0.0.1/BusquedaLeyes/php/servicioSOAP.php/consumirLicencia", RequestNamespace:="urn:busquedaLeyesWSDL", ResponseNamespace:="urn:busquedaLeyesWSDL")>  _
        Public Function consumirLicencia(ByVal key As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("consumirLicencia", New Object() {key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub consumirLicenciaAsync(ByVal key As String)
            Me.consumirLicenciaAsync(key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub consumirLicenciaAsync(ByVal key As String, ByVal userState As Object)
            If (Me.consumirLicenciaOperationCompleted Is Nothing) Then
                Me.consumirLicenciaOperationCompleted = AddressOf Me.OnconsumirLicenciaOperationCompleted
            End If
            Me.InvokeAsync("consumirLicencia", New Object() {key}, Me.consumirLicenciaOperationCompleted, userState)
        End Sub
        
        Private Sub OnconsumirLicenciaOperationCompleted(ByVal arg As Object)
            If (Not (Me.consumirLicenciaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent consumirLicenciaCompleted(Me, New consumirLicenciaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://127.0.0.1/BusquedaLeyes/php/servicioSOAP.php/cancelarLicencia", RequestNamespace:="urn:busquedaLeyesWSDL", ResponseNamespace:="urn:busquedaLeyesWSDL")>  _
        Public Function cancelarLicencia(ByVal key As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("cancelarLicencia", New Object() {key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub cancelarLicenciaAsync(ByVal key As String)
            Me.cancelarLicenciaAsync(key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelarLicenciaAsync(ByVal key As String, ByVal userState As Object)
            If (Me.cancelarLicenciaOperationCompleted Is Nothing) Then
                Me.cancelarLicenciaOperationCompleted = AddressOf Me.OncancelarLicenciaOperationCompleted
            End If
            Me.InvokeAsync("cancelarLicencia", New Object() {key}, Me.cancelarLicenciaOperationCompleted, userState)
        End Sub
        
        Private Sub OncancelarLicenciaOperationCompleted(ByVal arg As Object)
            If (Not (Me.cancelarLicenciaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cancelarLicenciaCompleted(Me, New cancelarLicenciaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub consultarLicenciaCompletedEventHandler(ByVal sender As Object, ByVal e As consultarLicenciaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class consultarLicenciaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub consumirLicenciaCompletedEventHandler(ByVal sender As Object, ByVal e As consumirLicenciaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class consumirLicenciaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub cancelarLicenciaCompletedEventHandler(ByVal sender As Object, ByVal e As cancelarLicenciaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cancelarLicenciaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
